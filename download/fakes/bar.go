// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"io"
	"sync"
)

type Bar struct {
	AddStub        func(int) int
	addMutex       sync.RWMutex
	addArgsForCall []struct {
		arg1 int
	}
	addReturns struct {
		result1 int
	}
	addReturnsOnCall map[int]struct {
		result1 int
	}
	FinishStub        func()
	finishMutex       sync.RWMutex
	finishArgsForCall []struct {
	}
	KickoffStub        func()
	kickoffMutex       sync.RWMutex
	kickoffArgsForCall []struct {
	}
	NewProxyReaderStub        func(io.Reader) io.Reader
	newProxyReaderMutex       sync.RWMutex
	newProxyReaderArgsForCall []struct {
		arg1 io.Reader
	}
	newProxyReaderReturns struct {
		result1 io.Reader
	}
	newProxyReaderReturnsOnCall map[int]struct {
		result1 io.Reader
	}
	SetOutputStub        func(io.Writer)
	setOutputMutex       sync.RWMutex
	setOutputArgsForCall []struct {
		arg1 io.Writer
	}
	SetTotalStub        func(int64)
	setTotalMutex       sync.RWMutex
	setTotalArgsForCall []struct {
		arg1 int64
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Bar) Add(arg1 int) int {
	fake.addMutex.Lock()
	ret, specificReturn := fake.addReturnsOnCall[len(fake.addArgsForCall)]
	fake.addArgsForCall = append(fake.addArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("Add", []interface{}{arg1})
	fake.addMutex.Unlock()
	if fake.AddStub != nil {
		return fake.AddStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.addReturns
	return fakeReturns.result1
}

func (fake *Bar) AddCallCount() int {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return len(fake.addArgsForCall)
}

func (fake *Bar) AddCalls(stub func(int) int) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = stub
}

func (fake *Bar) AddArgsForCall(i int) int {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	argsForCall := fake.addArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Bar) AddReturns(result1 int) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = nil
	fake.addReturns = struct {
		result1 int
	}{result1}
}

func (fake *Bar) AddReturnsOnCall(i int, result1 int) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = nil
	if fake.addReturnsOnCall == nil {
		fake.addReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.addReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *Bar) Finish() {
	fake.finishMutex.Lock()
	fake.finishArgsForCall = append(fake.finishArgsForCall, struct {
	}{})
	fake.recordInvocation("Finish", []interface{}{})
	fake.finishMutex.Unlock()
	if fake.FinishStub != nil {
		fake.FinishStub()
	}
}

func (fake *Bar) FinishCallCount() int {
	fake.finishMutex.RLock()
	defer fake.finishMutex.RUnlock()
	return len(fake.finishArgsForCall)
}

func (fake *Bar) FinishCalls(stub func()) {
	fake.finishMutex.Lock()
	defer fake.finishMutex.Unlock()
	fake.FinishStub = stub
}

func (fake *Bar) Kickoff() {
	fake.kickoffMutex.Lock()
	fake.kickoffArgsForCall = append(fake.kickoffArgsForCall, struct {
	}{})
	fake.recordInvocation("Kickoff", []interface{}{})
	fake.kickoffMutex.Unlock()
	if fake.KickoffStub != nil {
		fake.KickoffStub()
	}
}

func (fake *Bar) KickoffCallCount() int {
	fake.kickoffMutex.RLock()
	defer fake.kickoffMutex.RUnlock()
	return len(fake.kickoffArgsForCall)
}

func (fake *Bar) KickoffCalls(stub func()) {
	fake.kickoffMutex.Lock()
	defer fake.kickoffMutex.Unlock()
	fake.KickoffStub = stub
}

func (fake *Bar) NewProxyReader(arg1 io.Reader) io.Reader {
	fake.newProxyReaderMutex.Lock()
	ret, specificReturn := fake.newProxyReaderReturnsOnCall[len(fake.newProxyReaderArgsForCall)]
	fake.newProxyReaderArgsForCall = append(fake.newProxyReaderArgsForCall, struct {
		arg1 io.Reader
	}{arg1})
	fake.recordInvocation("NewProxyReader", []interface{}{arg1})
	fake.newProxyReaderMutex.Unlock()
	if fake.NewProxyReaderStub != nil {
		return fake.NewProxyReaderStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.newProxyReaderReturns
	return fakeReturns.result1
}

func (fake *Bar) NewProxyReaderCallCount() int {
	fake.newProxyReaderMutex.RLock()
	defer fake.newProxyReaderMutex.RUnlock()
	return len(fake.newProxyReaderArgsForCall)
}

func (fake *Bar) NewProxyReaderCalls(stub func(io.Reader) io.Reader) {
	fake.newProxyReaderMutex.Lock()
	defer fake.newProxyReaderMutex.Unlock()
	fake.NewProxyReaderStub = stub
}

func (fake *Bar) NewProxyReaderArgsForCall(i int) io.Reader {
	fake.newProxyReaderMutex.RLock()
	defer fake.newProxyReaderMutex.RUnlock()
	argsForCall := fake.newProxyReaderArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Bar) NewProxyReaderReturns(result1 io.Reader) {
	fake.newProxyReaderMutex.Lock()
	defer fake.newProxyReaderMutex.Unlock()
	fake.NewProxyReaderStub = nil
	fake.newProxyReaderReturns = struct {
		result1 io.Reader
	}{result1}
}

func (fake *Bar) NewProxyReaderReturnsOnCall(i int, result1 io.Reader) {
	fake.newProxyReaderMutex.Lock()
	defer fake.newProxyReaderMutex.Unlock()
	fake.NewProxyReaderStub = nil
	if fake.newProxyReaderReturnsOnCall == nil {
		fake.newProxyReaderReturnsOnCall = make(map[int]struct {
			result1 io.Reader
		})
	}
	fake.newProxyReaderReturnsOnCall[i] = struct {
		result1 io.Reader
	}{result1}
}

func (fake *Bar) SetOutput(arg1 io.Writer) {
	fake.setOutputMutex.Lock()
	fake.setOutputArgsForCall = append(fake.setOutputArgsForCall, struct {
		arg1 io.Writer
	}{arg1})
	fake.recordInvocation("SetOutput", []interface{}{arg1})
	fake.setOutputMutex.Unlock()
	if fake.SetOutputStub != nil {
		fake.SetOutputStub(arg1)
	}
}

func (fake *Bar) SetOutputCallCount() int {
	fake.setOutputMutex.RLock()
	defer fake.setOutputMutex.RUnlock()
	return len(fake.setOutputArgsForCall)
}

func (fake *Bar) SetOutputCalls(stub func(io.Writer)) {
	fake.setOutputMutex.Lock()
	defer fake.setOutputMutex.Unlock()
	fake.SetOutputStub = stub
}

func (fake *Bar) SetOutputArgsForCall(i int) io.Writer {
	fake.setOutputMutex.RLock()
	defer fake.setOutputMutex.RUnlock()
	argsForCall := fake.setOutputArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Bar) SetTotal(arg1 int64) {
	fake.setTotalMutex.Lock()
	fake.setTotalArgsForCall = append(fake.setTotalArgsForCall, struct {
		arg1 int64
	}{arg1})
	fake.recordInvocation("SetTotal", []interface{}{arg1})
	fake.setTotalMutex.Unlock()
	if fake.SetTotalStub != nil {
		fake.SetTotalStub(arg1)
	}
}

func (fake *Bar) SetTotalCallCount() int {
	fake.setTotalMutex.RLock()
	defer fake.setTotalMutex.RUnlock()
	return len(fake.setTotalArgsForCall)
}

func (fake *Bar) SetTotalCalls(stub func(int64)) {
	fake.setTotalMutex.Lock()
	defer fake.setTotalMutex.Unlock()
	fake.SetTotalStub = stub
}

func (fake *Bar) SetTotalArgsForCall(i int) int64 {
	fake.setTotalMutex.RLock()
	defer fake.setTotalMutex.RUnlock()
	argsForCall := fake.setTotalArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Bar) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	fake.finishMutex.RLock()
	defer fake.finishMutex.RUnlock()
	fake.kickoffMutex.RLock()
	defer fake.kickoffMutex.RUnlock()
	fake.newProxyReaderMutex.RLock()
	defer fake.newProxyReaderMutex.RUnlock()
	fake.setOutputMutex.RLock()
	defer fake.setOutputMutex.RUnlock()
	fake.setTotalMutex.RLock()
	defer fake.setTotalMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Bar) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
